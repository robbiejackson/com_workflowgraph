<?php
/**
 * @package     Joomla.Administrator
 * @subpackage  com_workflowgraph
 *
 * @copyright   Copyright (C) 2005 - 2020 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 */

namespace Joomla\Component\Workflowgraph\Administrator\Model;

\defined('_JEXEC') or die;

use Joomla\CMS\Factory;
use Joomla\CMS\MVC\Model\BaseDatabaseModel;
use Joomla\CMS\Language\LanguageHelper;
use Joomla\Registry\Registry;
//use Joomla\Component\Workflow\Administrator\Table\WorkflowTable;

class WorkflowgraphModel extends BaseDatabaseModel
{
	private $item;  // item returned by getItem()
	
	private $workflow_id; // id of the record in the workflow table, corresponding to this workflow
	
	private $workflowTable;  // Table instance for the workflow table
	
	private $stageTable;  // Table instance for the workflow stages table
	
	private $transitionTable;  // Table instance for the workflow transitions table

	/* 
	 * Function to set up the Table instances of the 3 workflow tables
	 *
	 */
	public function getWorkflowTables()
	{
		$db = Factory::getDbo();
		include_once(JPATH_ADMINISTRATOR . '/components/com_workflow/src/Table/WorkflowTable.php');
		$this->workflowTable = new \Joomla\Component\Workflow\Administrator\Table\WorkflowTable($db);
		include_once(JPATH_ADMINISTRATOR . '/components/com_workflow/src/Table/StageTable.php');
		$this->stageTable = new \Joomla\Component\Workflow\Administrator\Table\StageTable($db);
		include_once(JPATH_ADMINISTRATOR . '/components/com_workflow/src/Table/TransitionTable.php');
		$this->transitionTable = new \Joomla\Component\Workflow\Administrator\Table\TransitionTable($db);
	}
	
	/* 
	 * Function to determine the extension (eg com_content) with which this workflow is associated
	 *
	 */
	public function getWorkflowExtension()
	{
		$db = Factory::getDbo();
		include_once(JPATH_ADMINISTRATOR . '/components/com_workflow/src/Table/WorkflowTable.php');
		$this->workflowTable = new \Joomla\Component\Workflow\Administrator\Table\WorkflowTable($db);
		$app = Factory::getApplication();
		if (!isset($this->workflow_id))
		{
			$app = Factory::getApplication();
			$this->workflow_id = $app->input->get('id', 0, 'integer');
		}
		$this->workflowTable->load($this->workflow_id);
		return $this->workflowTable->extension;
	}
	
	/* 
	 * Function to save the graph data which has been sent up as a json string
	 *
	 */
	public function save($data)
	{
/*
 * The approach to saving the data is described below.
 * 
 * Once json-decoded the data is an array of objects which are in the graph, and these are of 5 types, indicated by the 'type' property:
 * - StartNode - the circle which is the source node to point to the default Workflow Stage
 * - Workflow Stage - the rectangles which represent Workflow Stages
 * - AnyStage - the oval which represents "any stage", which is the source node for a Workflow Transition with to_stage_id = -1
 * - Workflow Transition - the connections which represent Workflow Transitions
 * - Default Transition - the connection from the StartNode to the default Workflow Stage
 * The first 3 types are shapes in the graph, the latter 2 are connections.
 * It is important that the shapes precede the connections in the data array, and the javascript code ensures this.
 * 
 * These types have 2 sorts of information associated with them:
 * 1) Graphical data - eg the positioning of a shape in the graph. 
 * 2) "Workflow" data - ie the data associated with workflow stages and transitions, even if we didn't use the graph
 * 
 * The principles associated with saving the data are:
 * 1) For objects created within the graph the id is an id which is generated by the draw2d software. Where such objects relate to 
 * Workflow Stages or Workflow Stages or Workflow Transitions these ids are replaced by the Joomla record ids.
 * So for example, a Workflow Stage created in the graph will have its id converted into the id of the Stage record when that record is 
 * inserted into the database. Any Workflow Transitions to/from that stage will have the stage's (draw2d) id as the source or target node,
 * and these source/target nodes are converted to be the Joomla id too. This is why the Stages have to be processed before the Transitions.
 * The code keeps track of the mapping from draw2d ids to Joomla ids in the $idMap variable.
 * 2) Attributes of the Stage and Transition records such as 'title', 'published', etc are read from the 'title' and 'userData' properties;
 * users may wish to use the com_workflow forms for updating these records, so these field attributes need to be set.
 * 3) The graphical data associated with the graph is distributed among the params fields of the Workflow, Stage and Transition tables:
 * - Stage table params field - holds graphical data of that stage
 * - Transition table params field - holds graphical data of that transition
 * - Workflow table params field - holds graphical data of the StartNode, AnyStage and DefaultTransition objects
 * 4) The code keeps track of all the ids of stages and transitions which have been received, and then at the end it deletes from the database
 * stages and transitions which are in the database, but no longer in the graph.
 * 
**/
		$figures = json_decode($data, false); // all the shapes and connections in the graph
		
		$this->getWorkflowTables();
		$app = Factory::getApplication();
		$this->workflow_id = $app->input->get('id', 0, 'integer');
		
		$workflowNodes = []; // holds the StartNode, DefaultTransition and AnyStage figures, whose graphical details go into the workflow table params
		$idMap = [];  // mapping from draw2d id to Joomla record id
		$stageIds = [];  // list of ids of Stages processed - used to determine which ones aren't in this list and should be deleted
		$transitionIds = [];  // list of ids of Transitions processed - as for Stages
		$anyStageIds = [];  // used for determining which ids relate to AnyStage objects, and therefore transitions should have from_stage_id set to -1
		
		foreach ($figures as $figure) {
			switch ($figure->type) {
				case "StartNode":
					$workflowNodes[] = $figure;
					break;
				case "WorkflowStage":
					if (strlen($figure->attr->id) > 20  // it's just been created in the graph
							|| !$this->stageTable->load($figure->attr->id)) {   // it's been deleted in the db
						// set the id to 0 so that the record is inserted, but store the graph id to map it later
						$graphId = $figure->attr->id;
						$figure->attr->id = 0;
						$id = $this->_insertStage($figure);
						$idMap[$graphId] = $id;
					}
					else {
						$id = $this->_updateStage($figure);
					}
					$stageIds[] = $id; 
					break;
				case "AnyStage":
					$workflowNodes[] = $figure;
					$anyStageIds[] = $figure->attr->id; 
					break;
				case "WorkflowTransition":
					// update the source and target nodes with Joomla ids
					// also work out if this transition can be executed from any workflow stage
					$figure->fromAnyStage = false;
					if (strlen($figure->sourceNode) > 20) 
					{
						if (in_array($figure->sourceNode, $anyStageIds)) 
						{
							$figure->fromAnyStage = true;
						}
						elseif (array_key_exists($figure->sourceNode, $idMap)) 
						{
							$figure->sourceNode = $idMap[$figure->sourceNode];
						}
						else
						{	// something has seriously gone wrong
							Factory::getApplication()->enqueueMessage("Can't map source node " . $figure->sourceNode, "error");
						}
					}
					if (strlen($figure->targetNode) > 20) 
					{
						if (array_key_exists($figure->targetNode, $idMap)) 
						{
							$figure->targetNode = $idMap[$figure->targetNode];
						}
						else
						{	// something has seriously gone wrong
							Factory::getApplication()->enqueueMessage("Can't map target node " . $figure->targetNode, "error");
						}
					}
					// work out if it's a new transition or an existing one in the database
					if (strlen($figure->attr->id) > 20  // it's just been created in the graph
							|| !$this->transitionTable->load($figure->attr->id)) {   // it's been deleted in the db
						// set the id to 0 so that the record is inserted
						$figure->attr->id = 0;
						$id = $this->_insertTransition($figure);
					}
					else 
					{
						$id = $this->_updateTransition($figure);
					}
					$transitionIds[] = $id; 
					break;
				case "DefaultTransition":
					$workflowNodes[] = $figure;
					if (strlen($figure->targetNode) > 20) 
					{
						$figure->targetNode = $idMap[$figure->targetNode];
					}
					// set the target node as the default Workflow Stage in the database 
					$this->stageTable->load($figure->targetNode);
					if (!$this->stageTable->save(array("default" => '1')))  // Stage Table class handles setting other stages as non-default
					{
						Factory::getApplication()->enqueueMessage($this->stageTable->getError(),'error');
					}
					break;
				}
		}
		$this->_updateWorkflow($workflowNodes);
		$this->_deleteMissingTransitions($transitionIds);
		$this->_deleteMissingStages($stageIds);
		$app->enqueueMessage("Graph successfully saved", "message");
		return true;
	}
	
	/* 
	 * Function to store the graphical data of StartNode, AnyStage and DefaultTransition objects in the workflow table params field
	 *
	 */
	private function _updateWorkflow($workflowNodes)
	{
		$this->workflowTable->load($this->workflow_id);
		$params = new Registry($this->workflowTable->params);
		$params->set('graph', $workflowNodes);
		if (!$this->workflowTable->save(array("params" => $params->toString())))
		{
			Factory::getApplication()->enqueueMessage($this->workflowTable->getError(),'error');
		}
		return true;
	}
	
	/* 
	 * Function to insert a new Workflow Stage, based on the data from the graph
	 *
	 */
	private function _insertStage($figure)
	{
		$paramsArray = array('graph' => array(
							"x"			=> 	$figure->attr->x,
							"y"			=> 	$figure->attr->y,
							"width"		=> 	$figure->attr->width,
							"height"	=>	$figure->attr->height,
							));
		$params = json_encode($paramsArray);
		$stage = array(
					"id" 			=> 0,
					"workflow_id" 	=> $this->workflow_id,
					"published"		=> $figure->attr->userData->published,
					"title"			=> $figure->attr->title,
					"description"	=> $figure->attr->userData->description,
					"default"		=> 0,
					"params"		=> $params
					);
		if (!$this->stageTable->save($stage))
		{
			Factory::getApplication()->enqueueMessage($this->stageTable->getError(),'error');
		}
		return $this->stageTable->id;
	}
	
	/* 
	 * Function to update an existing Workflow Stage, based on the data from the graph
	 *
	 */
	private function _updateStage($figure)
	{
		$this->stageTable->load($figure->attr->id);
		$params = new Registry($this->stageTable->params);
		
		$paramsArray = array(
							"x"			=> 	$figure->attr->x,
							"y"			=> 	$figure->attr->y,
							"width"		=> 	$figure->attr->width,
							"height"	=>	$figure->attr->height,
							);
		$params->set('graph', $paramsArray);
		
		$stage = array(
					"workflow_id" 	=> $this->workflow_id,
					"published"		=> $figure->attr->userData->published,
					"title"			=> $figure->attr->title,
					"description"	=> $figure->attr->userData->description,
					"params"		=> $params->toString()
					);
		
		if (!$this->stageTable->save($stage))
		{
			Factory::getApplication()->enqueueMessage($this->stageTable->getError(),'error');
		}
		return $this->stageTable->id;
	}
	
	/* 
	 * Function to delete Workflow Stage records which haven't appeared in the uploaded graph
	 *
	 */
	private function _deleteMissingStages($idArray)
	{
		$db = Factory::getDbo();
		$query = $db->getQuery(true);
		$query->select($db->quoteName('id'))
			->from($db->quoteName('#__workflow_stages'))
			->where($db->quoteName('workflow_id') . '=' . $this->workflow_id)
			->where($db->quoteName('id') . ' NOT IN (' . implode(",", $idArray) . ')');
		$db->setQuery($query);
		$idsToDelete = $db->loadColumn();
		foreach ($idsToDelete as $id) { 
			$this->stageTable->delete($id);
		} 
		return true;
	}
	
	/* 
	 * Function to insert a new Workflow Stage, based on the data from the graph
	 *
	 */
	private function _insertTransition($figure)
	{
		$paramsArray = array('graph' => array(
							"sourceNode" => $figure->sourceNode,
							"sourcePort" => $figure->sourcePort,
							"targetNode" => $figure->targetNode,
							"targetPort" => $figure->targetPort,
							));
		$params = json_encode($paramsArray);
		$transition = array(
	                "id" 			=> 0,
					"workflow_id" 	=> $this->workflow_id,
					"published"		=> $figure->attr->userData->published,
					"title"			=> $figure->attr->title,
					"description"	=> $figure->attr->userData->description,
					"from_stage_id" => $figure->fromAnyStage ? "-1" : $figure->sourceNode,
					"to_stage_id" 	=> $figure->targetNode,
					"params"		=> $params,
					"options"		=> array("publishing" => $figure->attr->userData->actionPublishing),
					);
		if (!$this->transitionTable->save($transition))
		{
			Factory::getApplication()->enqueueMessage($this->transitionTable->getError(),'error');
		}
		return $this->transitionTable->id;
	}
	
	/* 
	 * Function to update an existing Workflow Transition, based on the data from the graph
	 *
	 */
	private function _updateTransition($figure)
	{
		$this->transitionTable->load($figure->attr->id);
		$params = new Registry($this->transitionTable->params);
		
		$paramsArray = array(
							"sourceNode" => $figure->sourceNode,
							"sourcePort" => $figure->sourcePort,
							"targetNode" => $figure->targetNode,
							"targetPort" => $figure->targetPort,
							);
		$params->set('graph', $paramsArray);

		$transition = array(
					"workflow_id" 	=> $this->workflow_id,
					"published"		=> $figure->attr->userData->published,
					"title"			=> $figure->attr->title,
					"description"	=> $figure->attr->userData->description,
					"from_stage_id" => $figure->fromAnyStage ? "-1" : $figure->sourceNode,
					"to_stage_id" 	=> $figure->targetNode,
					"params"		=> $params->toString(),
					"options"		=> array("publishing" => $figure->attr->userData->actionPublishing),
					);
		if (!$this->transitionTable->save($transition))
		{
			Factory::getApplication()->enqueueMessage($this->transitionTable->getError(),'error');
		}
		return $this->transitionTable->id;
	}
	
	/* 
	 * Function to delete Workflow Stage records which haven't appeared in the uploaded graph
	 *
	 */
	private function _deleteMissingTransitions($idArray)
	{
		$db = Factory::getDbo();
		$query = $db->getQuery(true);
		$query->select($db->quoteName('id'))
			->from($db->quoteName('#__workflow_transitions'))
			->where($db->quoteName('workflow_id') . '=' . $this->workflow_id)
			->where($db->quoteName('id') . ' NOT IN (' . implode(",", $idArray) . ')');
		$db->setQuery($query);
		$idsToDelete = $db->loadColumn();
		foreach ($idsToDelete as $id) { 
			$this->transitionTable->delete($id);
		} 
		return true;
	}
	
	/* 
	 * Function to get the workflow data from the workflow, stage and transition records, 
	 *   in order to send it down to the graph functionality
	 * Graphical data is collated from the params fields of these records.
	 * Workflow data is collated from the stage and transition record fields
	 *   and this is inserted into the 'attr' attributes for passing down the graph,
	 *   and this includes setting up the userData attributes from the 'publishing', 'options' fields, etc.
	 */
	public function getItem($pk = NULL)
	{
		$this->getWorkflowTables();
		$app = Factory::getApplication();
		$this->workflow_id = $pk ? $pk : $app->input->get('id', 0, 'integer');
		$this->workflowTable->load($this->workflow_id);
		
		$anyStages = [];
		$startNode = [];
		$defaultTransition = [];
		
		$params = json_decode($this->workflowTable->params);
		if (isset($params->graph))
		{
			$graphItems = $params->graph;
			foreach ($graphItems as $graphItem) {
				switch ($graphItem->type) {
					case "StartNode":
						$startNode[] = $graphItem;
						break;
					case "AnyStage":
						$anyStages[] = $graphItem;
						break;
					case "DefaultTransition":
						$defaultTransition[] = $graphItem;
						break;
				}
			}
		}
		
		$db = Factory::getDbo();
		$query = $db->getQuery(true);
		$query->select($db->quoteName(array('id', 'published', 'title', 'description', 'default', 'params')))
			->from($db->quoteName('#__workflow_stages'))
			->where($db->quoteName('workflow_id') . ' = ' . $this->workflow_id);

		$db->setQuery($query);

		$stages = $db->loadObjectList();
		
		$stagesList = [];
		$defaultStageId = 0;
		foreach ($stages as $stage) {
			$stage->userData = array("published" => $stage->published, "description" => $stage->description);
			if ($stage->params) {
				$params = json_decode($stage->params);
				if ($params->graph) {
					foreach (get_object_vars($params->graph) as $key => $value) {
						$stage->$key = $value;
					}
				}
			}
			if ($stage->default == "1") {
				$defaultStageId = $stage->id;
			}
			unset($stage->description, $stage->params, $stage->default);
			$stagesList[] = array('type' => "WorkflowStage", "attr" => $stage);
		}
		
		$query = $db->getQuery(true);
		$query->select($db->quoteName(array('id', 'published', 'title', 'description', 'from_stage_id', 'to_stage_id', 'params', 'options')))
			->from($db->quoteName('#__workflow_transitions'))
			->where($db->quoteName('workflow_id') . ' = ' . $this->workflow_id);

		$db->setQuery($query);

		$transitions = $db->loadObjectList();
		
		$transitionsList = [];
		foreach ($transitions as $transition) {
			$transition->userData = array("published" => $transition->published, "description" => $transition->description);
			$graphDetails = array();
			if ($transition->params) {
				$params = json_decode($transition->params);
				if ($params->graph) {
					$graphDetails = (array)$params->graph;
				}
			} 
			if ($transition->options) {
				$options = json_decode($transition->options);
				$actionPublishing = isset($options->publishing) ? $options->publishing : "";
			} else {
				$actionPublishing = "";
			}
			$transition->userData = array_merge($transition->userData, array("actionPublishing" => $actionPublishing));
			unset($transition->description, $transition->params, $transition->options);
			$transitionsList[] = array_merge(array('type' => "WorkflowTransition", "attr" => $transition), $graphDetails);
		}
		
		$workflowItems = array_merge($startNode, $anyStages, $stagesList, $defaultTransition, $transitionsList);

		$this->item = (object) ["id" => $this->workflow_id, "title" => $this->workflowTable->title, 
								"defaultStageId" => $defaultStageId, "graph" => json_encode($workflowItems)];
		
		return $this->item;
	}
}